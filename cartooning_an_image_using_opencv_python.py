# -*- coding: utf-8 -*-
"""Cartooning_an_Image_using_OpenCV_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z-PuPazkMqRr5F8nGi1u77mupjCSXcww
"""

from google.colab import files
files.upload()

pip install opencv-python

import cv2
from google.colab.patches import cv2_imshow

class Cartoonizer:
    """Cartoonizer effect
    A class that applies a cartoon effect to an image.
    The class uses a bilateral filter and adaptive thresholding to create
    a cartoon effect.
    """

    def __init__(self):
        pass

    def render(self, img_rgb):
        # Check if the image file exists and can be read
        img_rgb = cv2.imread(img_rgb)
        if img_rgb is None:
            print(f"Error: Could not read image file: {img_rgb}")
            return None  # Return None to indicate failure

        img_rgb = cv2.resize(img_rgb, (1366, 768))
        numDownSamples = 2  # number of downscaling steps
        numBilateralFilters = 50  # number of bilateral filtering steps

        # ... (rest of your code) ...

tmp_canvas = Cartoonizer()

file_name = "download (3).jpeg"  # File_name will come here
res = tmp_canvas.render(file_name)

# Check if rendering was successful before proceeding
if res is not None:
    cv2.imwrite("Cartoon version.jpg", res)
    cv2_imshow(res)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
else:
    print("Cartoonization failed due to image reading error.")

"""#Simpler Implementation"""

# importing libraries
import cv2
from google.colab.patches import cv2_imshow
import numpy as np

# reading image
#Check to ensure the file exists and the path is correct.
img = cv2.imread("download (3).jpeg") # Changed file name to match uploaded file.

# Check if the image was loaded correctly
if img is None:
    print("Error: Could not load image. Please check the file path.")
else:
    # Edges
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray = cv2.medianBlur(gray, 5)
    edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
              cv2.THRESH_BINARY, 9, 9)

    # Cartoonization
    color = cv2.bilateralFilter(img, 9, 250, 250)
    cartoon = cv2.bitwise_and(color, color, mask=edges)


    cv2_imshow(img)
    cv2_imshow(edges)
    cv2_imshow(cartoon)